metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolSVM)
predsentSVM <- predict(Svmfitsentiment, newdata = testing)
testing$predsentSVM <- predsentSVM
confusionMatrix(testing$predsentSVM, testing$iphonesentiment)
iphoneNO <- iphoneNZV[, -iphone]
iphoneNZV$iphone
iphoneNO <- iphoneNZV %>%
select(-iphone)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphoneNO$iphonesentiment,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphoneNO[inTrain,]
testing <- iphoneNO[-inTrain,]
#Setting cross validation parameters
fitcontrolSVM <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1)
#Training SVM model
set.seed(123)
Svmfitsentiment <- train(iphonesentiment~.,
training,
method = "svmLinear",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolSVM)
predsentSVM <- predict(Svmfitsentiment, newdata = testing)
testing$predsentSVM <- predsentSVM
confusionMatrix(testing$predsentSVM, testing$iphonesentiment)
#Set iphonesentiment as factor
iphonematrix$iphonesentiment <- as.factor(iphonematrix$iphonesentiment)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphoneNO$iphonesentiment,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphoneNO[inTrain,]
testing <- iphoneNO[-inTrain,]
#Setting cross validation parameters
fitcontrolC5 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1)
#Training KNN model
set.seed(123)
C5fitsentiment <- train(iphonesentiment~.,
training,
method = "C5.0",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolC5)
predsentC5 <- predict(C5fitsentiment, newdata = testing)
testing$predsentC5 <- predsentC5
confusionMatrix(testing$predsentC5, testing$iphonesentiment)
#let us recode the iphonesentiment variables from 0-6 levels
#to only 2 levels (1 and 4)
iphoneNO$Recode <- recode(iphoneNO$iphonesentiment,
'0' = 1, '1' = 1, '2' = 1,
'3' = 4, '4' = 4, '5' = 4)
str(iphoneNO$Recode)
plot_ly(iphoneNO,
x = ~iphoneNO$iphonesentiment,
type = 'histogram')
plot_ly(iphoneNO,
x = ~iphoneNO$Recode,
type = 'histogram')
#let us recode the iphonesentiment variables from 0-6 levels
#to only 2 levels (1 and 4)
iphoneNO$Recode <- recode(iphoneNO$iphonesentiment,
'0' = 1, '1' = 1, '2' = 2,
'3' = 3, '4' = 4, '5' = 4)
plot_ly(iphoneNO,
x = ~iphoneNO$Recode,
type = 'histogram')
iphoneNO$Recode <- as.factor(iphoneNO$Recode)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphoneNO$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphoneNO[inTrain,]
testing <- iphoneNO[-inTrain,]
#Setting cross validation parameters
fitcontrolSVM <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1)
set.seed(123)
Svmfitsentiment <- train(Recode~.,
training,
method = "svmLinear",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolSVM)
predsentSVM <- predict(Svmfitsentiment, newdata = testing)
testing$predsentSVM <- predsentSVM
confusionMatrix(testing$predsentSVM, testing$iphonesentiment)
#let us recode the iphonesentiment variables from 0-6 levels
#to only 2 levels (1 and 4)
iphoneNO$Recode <- recode(iphoneNO$iphonesentiment,
'0' = 1, '1' = 1, '2' = 1,
'3' = 4, '4' = 4, '5' = 4)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphoneNO$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphoneNO[inTrain,]
testing <- iphoneNO[-inTrain,]
#Setting cross validation parameters
fitcontrolSVM <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1)
set.seed(123)
Svmfitsentiment <- train(Recode~.,
training,
method = "svmLinear",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolSVM)
iphoneNO$Recode <- as.factor(iphoneNO$Recode)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphoneNO$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphoneNO[inTrain,]
testing <- iphoneNO[-inTrain,]
#Setting cross validation parameters
fitcontrolSVM <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1)
set.seed(123)
Svmfitsentiment <- train(Recode~.,
training,
method = "svmLinear",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolSVM)
predsentSVM <- predict(Svmfitsentiment, newdata = testing)
testing$predsentSVM <- predsentSVM
confusionMatrix(testing$predsentSVM, testing$iphonesentiment)
#let us recode the iphonesentiment variables from 0-6 levels
#to only 2 levels (1 and 4)
iphonematrix$Recode <- recode(iphonematrix$iphonesentiment,
'0' = 1, '1' = 1, '2' = 2,
'3' = 3, '4' = 4, '5' = 4)
#Set iphonesentiment as factor
iphonematrix$Recode <- as.factor(iphonematrix$Recode)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolSVM <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1)
#Training SVM model
set.seed(123)
Svmfitsentiment <- train(Recode~.,
training,
method = "svmLinear",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolSVM)
#Predicting iphonesentiment from the training data
predsentSVM <- predict(Svmfitsentiment, newdata = testing)
#Creating new column with predictions
testing$predsentSVM <- predsentSVM
#Checking the metrics
confusionMatrix(testing$predsentSVM, testing$iphonesentiment)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolC5 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1)
#Training KNN model
set.seed(123)
C5fitsentiment <- train(Recode~.,
training,
method = "C5.0",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolC5)
predsentC5 <- predict(C5fitsentiment, newdata = testing)
testing$predsentC5 <- predsentC5
confusionMatrix(testing$predsentC5, testing$iphonesentiment)
confusionMatrix(testing$predsentC5, testing$Recode)
#Set iphonesentiment as factor
iphonematrix$Recode <- as.factor(iphonematrix$Recode)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolC5 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
preProc = ("range", "center"))
#Training KNN model
#Setting cross validation parameters
fitcontrolC5 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
preProc = ("center", "range"))
#Setting cross validation parameters
fitcontrolC5 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
PreProc = ("center", "scale"))
#Setting cross validation parameters
fitcontrolC5 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
PreProc = c("center", "scale"))
preProc = c("center", "scale", "range")
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolC5 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
preProc = c("center", "scale", "range")
set.seed(123)
C5fitsentiment <- train(Recode~.,
Recodeng,
method = "C5.0",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolC5)
#Training C5 model
set.seed(123)
C5fitsentiment <- train(Recode~.,
training,
method = "C5.0",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolC5)
#Predicting iphonesentiment from the training data
predsentC5 <- predict(C5fitsentiment, newdata = testing)
#Creating new column with predictions
testing$predsentC5 <- predsentC5
confusionMatrix(testing$predsentC5, testing$Recode)
iphonematrix <- iphonematrix %>%
select(-iphonesentiment)
#Set iphonesentiment as factor
iphonematrix$Recode <- as.factor(iphonematrix$Recode)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolC5 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
preProc = c("center", "scale", "range")
#Training C5 model
set.seed(123)
C5fitsentiment <- train(Recode~.,
training,
method = "C5.0",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolC5)
set.seed(123)
C5fitsentiment <- train(Recode~.,
training,
method = "C5.0",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolC5)
predsentC5 <- predict(C5fitsentiment, newdata = testing)
testing$predsentC5 <- predsentC5
confusionMatrix(testing$predsentC5, testing$Recode)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolC5 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
preProc = c("center", "scale", "range"))
#Training C5 model
set.seed(123)
C5fitsentiment <- train(Recode~.,
training,
method = "C5.0",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolC5)
#Predicting iphonesentiment from the training data
predsentC5 <- predict(C5fitsentiment, newdata = testing)
#Creating new column with predictions
testing$predsentC5 <- predsentC5
#Checking the metrics
confusionMatrix(testing$predsentC5, testing$Recode)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolKNN <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
preProc = c("center", "scale", "range"))
#Training KNN model
set.seed(123)
Knnfitsentiment <- train(Recode~.,
training,
method = "kknn",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolKNN)
#Predicting iphonesentiment from the training data
predsentKNN <- predict(Knnfitsentiment, newdata = testing)
#Creating new column with predictions
testing$predsentKNN <- predsentKNN
#Checking the metrics
confusionMatrix(testing$predsentKNN, testing$Recode)
#Set iphonesentiment as factor
iphonematrix$Recode <- as.factor(iphonematrix$Recode)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolRF <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
preProc = c("center", "scale", "range"))
#Training Random Forest model
set.seed(123)
RFfitsentiment <- train(Recode~.,
training,
method = "parRF",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolRF)
#Predicting iphonesentiment from the training data
predsentRF <- predict(RFfitsentiment, newdata = testing)
#Creating new column with predictions
testing$predsentRF <- predsentRF
#Checking the metrics
confusionMatrix(testing$predsentRF, testing$Recode)
#Set iphonesentiment as factor
iphonematrix$Recode <- as.factor(iphonematrix$Recode)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$Recode,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolSVM <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
preProc = c("center", "scale", "range"))
#Training SVM model
set.seed(123)
Svmfitsentiment <- train(Recode~.,
training,
method = "svmLinear",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolSVM)
#Predicting iphonesentiment from the training data
predsentSVM <- predict(Svmfitsentiment, newdata = testing)
#Creating new column with predictions
testing$predsentSVM <- predsentSVM
#Checking the metrics
confusionMatrix(testing$predsentSVM, testing$Recode)
#Set iphonesentiment as factor
iphonematrix$iphonesentiment <- as.factor(iphonematrix$iphonesentiment)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$iphonesentiment,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolSVM <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1)
# Required
if(!require(pacman))install.packages("pacman")
pacman::p_load('doParallel', 'plotly', 'caret', 'corrplot', 'dplyr',
"e1071", "kknn")
# Find how many cores are on your machine
detectCores() #In my case there are 8
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(6)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 6
iphonematrix <- read.csv("iphone_smallmatrix_labeled_8d.csv")
iphonematrix$iphonesentiment <- as.factor(iphonematrix$iphonesentiment)
#Data partition
set.seed(123)
inTrain <- createDataPartition(y = iphonematrix$iphonesentiment,
p=0.7,
list = FALSE)
#Separating the data into training and testing
training <- iphonematrix[inTrain,]
testing <- iphonematrix[-inTrain,]
#Setting cross validation parameters
fitcontrolSVM <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1)
#Training SVM model
set.seed(123)
Svmfitsentiment <- train(iphonesentiment~.,
training,
method = "svmLinear",
metric = "Accuracy",
tuneLength = 1,
trControl = fitcontrolSVM)
#Predicting iphonesentiment from the training data
predsentSVM <- predict(Svmfitsentiment, newdata = testing)
#Creating new column with predictions
testing$predsentSVM <- predsentSVM
#Checking the metrics
confusionMatrix(testing$predsentSVM, testing$iphonesentiment)
iphonematrix$Recode <- recode(iphonematrix$iphonesentiment,
'0' = 1, '1' = 1, '2' = 2,
'3' = 3, '4' = 4, '5' = 4)
iphonematrix$Recode <- as.factor(iphoneNO$Recode)
iphonematrix <- iphonematrix %>%
select(-iphonesentiment)
# Required
if(!require(pacman))install.packages("pacman")
pacman::p_load('doParallel', 'plotly', 'caret', 'corrplot', 'dplyr',
"e1071", "kknn")
#######################
# Setting Do Parallel #
#######################
# Find how many cores are on your machine
detectCores() #In my case there are 8
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(6)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 6
####################
# Data Exploration #
####################
#Importing the dataset
iphonematrix <- read.csv("iphone_smallmatrix_labeled_8d.csv")
#Checking for missing data
iphonematrix[!complete.cases(iphonematrix),]
#There are no missing values
#Distribution dependent variable
plot_ly(iphonematrix,
x= ~iphonematrix$iphonesentiment,
type='histogram')
#It is skewed to the right
#let us recode the iphonesentiment variables from 0-6 levels
#to only 2 levels (1 and 4)
iphonematrix$Recode <- recode(iphonematrix$iphonesentiment,
'0' = 1, '1' = 1, '2' = 2,
'3' = 3, '4' = 4, '5' = 4)
iphonematrix <- iphonematrix %>%
select(-iphonesentiment)
